generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/v2-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Media
model Media {
  id               String          @id @default(uuid())
  url              String
  alt              String?
  // Relations
  auctionListing   AuctionListing? @relation(fields: [auctionListingId], references: [id], onDelete: Cascade)
  auctionListingId String?
  userAvatar       UserProfile?    @relation("AvatarMedia", fields: [userAvatarId], references: [id], onDelete: Cascade)
  userAvatarId     Int?            @unique
  userBanner       UserProfile?    @relation("BannerMedia", fields: [userBannerId], references: [id], onDelete: Cascade)
  userBannerId     Int?            @unique

  // Event Manager
  eventVenueMedia    EventVenue? @relation("VenueMedia", fields: [eventVenueId], references: [id], onDelete: Cascade)
  eventVenueId       String?     @unique
  eventVenueImages   EventVenue? @relation("VenueImages", fields: [eventVenueImagesId], references: [id], onDelete: Cascade)
  eventVenueImagesId String?     @unique
  eventVenueBanner   EventVenue? @relation("VenueBanner", fields: [eventVenueBannerId], references: [id], onDelete: Cascade)
  eventVenueBannerId String?     @unique
  event              Event?      @relation("EventMedia", fields: [eventId], references: [id], onDelete: Cascade)
  eventId            String?     @unique
  eventImages        Event?      @relation("EventImages", fields: [eventImagesId], references: [id], onDelete: Cascade)
  eventImagesId      String?     @unique
}

// User API Key
enum ApiKeyStatus {
  ACTIVE
  REVOKED
}

model ApiKey {
  id        Int          @id @default(autoincrement())
  name      String?      @default("API Key")
  key       String       @unique @default(uuid())
  revokedAt DateTime?
  status    ApiKeyStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    Int
  user      UserProfile  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Profile
model UserProfile {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  email         String           @unique
  avatar        Media?           @relation("AvatarMedia")
  banner        Media?           @relation("BannerMedia")
  bio           String?
  password      String
  salt          String
  created       DateTime         @default(now())
  updated       DateTime         @updatedAt
  // Auction House
  credits       Int              @default(1000)
  listings      AuctionListing[] @relation("Listings")
  bids          AuctionBid[]
  wins          AuctionListing[] @relation("Wins")
  apiKeys       ApiKey[]
  // Events Planner
  venuesOwned   EventVenue[]     @relation("creator")
  venuesManaged EventVenue[]     @relation("VenueManagers")
  tickets       Ticket[]
  unread        Notification[]   @relation("unreadBy")
  read          Notification[]   @relation("readBy")
  money         Int              @default(1000)
}

// Events Planner.
model EventVenue {
  id              String          @id @default(uuid())
  name            String
  description     String?
  address         VenueAddress?
  capacity        Int
  type            String
  services        Json
  rentalPrice     Float
  email           String
  promoImage      Media?          @relation("VenueMedia")
  media           Media[]         @relation("VenueImages")
  venueBanner     Media?          @relation("VenueBanner")
  createdBy       Int
  creator         UserProfile     @relation("creator", fields: [createdBy], references: [id])
  eventManagers   UserProfile[]   @relation("VenueManagers")
  events          Event[]
  eventsInstances EventInstance[]
  isPublic        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Notification    Notification[]
}

model VenueAddress {
  id            String     @id @default(uuid())
  line1         String
  line2         String?
  city          String
  postcode      String
  country       String
  googleMapLink String? // Optional field for Google Maps share link
  venue         EventVenue @relation(fields: [venueId], references: [id])
  venueId       String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Event {
  id            String          @id @default(uuid())
  name          String
  description   String?
  media         Media?          @relation("EventMedia")
  images        Media[]         @relation("EventImages")
  numberTickets Int
  ticketPrice   Float
  startsAt      DateTime
  endsAt        DateTime
  venue         EventVenue[]
  instances     EventInstance[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model EventInstance {
  id           String         @id @default(uuid())
  name         String
  startsAt     DateTime
  endsAt       DateTime
  event        Event          @relation(fields: [eventId], references: [id])
  eventId      String
  venue        EventVenue     @relation(fields: [venueId], references: [id])
  venueId      String
  tickets      Ticket[]
  ticketsSold  Int
  capacity     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

model Ticket {
  id              String        @id @default(uuid())
  name            String
  price           Float
  eventInstance   EventInstance @relation(fields: [eventInstanceId], references: [id])
  eventInstanceId String
  user            UserProfile   @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Notification {
  id              String         @id @default(uuid())
  type            String
  message         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  read            UserProfile[]  @relation("readBy")
  unread          UserProfile[]  @relation("unreadBy")
  EventInstance   EventInstance? @relation(fields: [eventInstanceId], references: [id])
  eventInstanceId String?
  Venue           EventVenue?    @relation(fields: [venueId], references: [id])
  venueId         String?
}

// Auction House
model AuctionListing {
  id          String       @id @default(uuid())
  title       String
  description String?
  media       Media[]
  tags        String[]
  created     DateTime     @default(now())
  updated     DateTime     @updatedAt
  endsAt      DateTime
  seller      UserProfile  @relation("Listings", fields: [sellerName], references: [name], onDelete: Cascade)
  sellerName  String
  winner      UserProfile? @relation("Wins", fields: [winnerName], references: [name], onDelete: Cascade)
  winnerName  String?
  bids        AuctionBid[]
}

model AuctionBid {
  id         String         @id @default(uuid())
  amount     Int
  bidder     UserProfile    @relation(fields: [bidderName], references: [name], onDelete: Cascade)
  bidderName String
  listing    AuctionListing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId  String
  created    DateTime       @default(now())
}
